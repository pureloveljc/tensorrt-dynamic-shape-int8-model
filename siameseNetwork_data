import random
from torch.utils.data import Dataset
from torchvision.datasets import ImageFolder
from PIL import Image
import torch
import torchvision.transforms as transforms
import numpy as np
import cv2


class SiameseDataset(Dataset):
    def __init__(self, image_folder, transform=None, n_pairs=None):
        self.image_folder = image_folder
        self.transform = transform
        self.n_pairs = n_pairs if n_pairs else len(image_folder)

    def __len__(self):
        return self.n_pairs

    def __getitem__(self, index):
        image1, class1 = random.choice(self.image_folder.imgs)
        similar = random.random() > 0.5
        # print(self.image_folder.imgs)
        if similar:
            while True:
                image2, class2 = random.choice(self.image_folder.imgs)
                if class1 == class2:
                    break
        else:
            while True:
                image2, class2 = random.choice(self.image_folder.imgs)
                if class1 != class2:
                    break

        image1, image2 = Image.open(image1), Image.open(image2)

        if self.transform:
            image1 = self.transform(image1)
            image2 = self.transform(image2)

        return (image1, image2), torch.tensor([float(similar)], dtype=torch.float32)

def to_rgb(image):
    if image.mode != 'RGB':
        return image.convert('RGB')
    return image

data_transforms = transforms.Compose([
transforms.Lambda(to_rgb),
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])
if __name__ == '__main__':
    data_folder = "/home/all/ljc/icon_data_all/siamese_data_test//"
    image_folder = ImageFolder(data_folder)
    siamese_dataset = SiameseDataset(image_folder, transform=data_transforms, n_pairs=10000)

    batch_size = 1
    train_loader = torch.utils.data.DataLoader(siamese_dataset, batch_size=batch_size, shuffle=True, num_workers=4)

    mean = np.array([0.485, 0.456, 0.406])
    std = np.array([0.229, 0.224, 0.225])


    for (image_pairs, labels) in train_loader:
        print(image_pairs[0])
        print(image_pairs[1])
        print(labels)
        image_np = image_pairs[0][0].numpy().transpose(1, 2, 0)
        image_np = (image_np * std + mean) * 255
        image_bgr = cv2.cvtColor(np.float32(image_np), cv2.COLOR_RGB2BGR)

        image_np1 = image_pairs[1][0].numpy().transpose(1, 2, 0)
        image_np1 = (image_np1 * std + mean) * 255
        image_bgr1 = cv2.cvtColor(np.float32(image_np1), cv2.COLOR_RGB2BGR)

        # Show the image using cv2.imshow()
        cv2.imwrite('image_pairs0.jpg', np.uint8(image_bgr))
        cv2.imwrite('image_pairs1.jpg', np.uint8(image_bgr1))

        print('~~~~~~~~~~')
        break

