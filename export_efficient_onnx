import torch
import torch.nn as nn
import torch.nn.functional as F
from efficientnet_pytorch import EfficientNet



class Mycls(nn.Module):
    def __init__(self, ori_net):
        super(Mycls, self).__init__()
        self.ori_net = ori_net
        self.mean = torch.tensor([0.485, 0.456, 0.406]).view(1, 3, 1, 1).to(device)
        self.std = torch.tensor([0.229, 0.224, 0.225]).view(1, 3, 1, 1).to(device)

    def forward(self, x):
        x = x.permute(0, 3, 1, 2)
        x = (x/255 - self.mean) / self.std
        x = self.ori_net(x)
        x = F.softmax(x, dim=1)
        scores, index = x.topk(k=1, dim=1)
        index = index.float()
        outputs = torch.cat([index, scores], dim=1)
        return outputs

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

# Create EfficientNet-B0 with 163 classes
model_ft = EfficientNet.from_pretrained('efficientnet-b0', num_classes=163)
model_ft.set_swish(memory_efficient=False)

model_ft = Mycls(model_ft)
model_ft = model_ft.to(device)

# Assuming that we are on a CUDA machine, this should print a CUDA device:
print(device)

filename = '/home/all/ljc/code_commit/EfficientNet-PyTorch/icon_0522/model_best_0522_163.pth.tar'

# Load model weights
checkpoint = torch.load(filename)


# print(checkpoint)
# best_acc = checkpoint['best_acc']
checkpoint = checkpoint['state_dict']
new_dict_state = {}
for key, value in checkpoint.items():
    # print(key)
    if "module." in key:
        key = key[7:]
    # print(key)
    key = "ori_net."+key

    new_dict_state[key] = value
model_dict = model_ft.state_dict()
model_dict.update(new_dict_state)

model_ft.load_state_dict(model_dict)


model_ft.eval()
torch.cuda.empty_cache()
# Export the model to an ONNX file
dummy_input = torch.randn(1, 224, 224, 3, device=device)
with torch.no_grad():

    y_onnx =  torch.onnx._export(model_ft, dummy_input, "efficientnet_b0.onnx",
                      input_names=["input"],
                      output_names=["output"],
                      dynamic_axes={'input':{0:'batchsize'},
                                    'output':{0:'batchsize'}},
                      verbose=True,
                      )
with torch.no_grad():
    y = model_ft(dummy_input)
    print('~~~~~~~~~')
    print(y_onnx)
    print("result", torch.max(torch.abs(y - y_onnx)))
CUDA_VISIBLE_DEVICES=1 trtexec --onnx=/home/all/ljc/code_commit/EfficientNet-PyTorch/efficientnet_b0.onnx --saveEngine=/home/all/ljc/code_commit/EfficientNet-PyTorch/efficientnet_b0.trt --workspace=2048 --minShapes=input:1x224x224x3 --optShapes=input:16x224x224x3 --maxShapes=input:32x224x224x3 --fp16
